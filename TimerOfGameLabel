import javax.swing.*;
import java.awt.*;

public class TimerOfGameLabel extends JLabel implements Runnable{
    private Thread t; 
    private volatile boolean isPause, isExit;
    private long timeInMillis;
    
    public TimerOfGameLabel(){
        initTimer();
        t = new Thread(this);
        pause();
        t.start();
        refreshTime();
    }

    private void initTimer(){
        timeInMillis = 0;
        setHorizontalAlignment(LEFT); 
        setFont(new Font("Microsoft JhengHei UI Light", Font.BOLD, 16));
        setForeground(new Color(0xFBF9FF));
    }

    @Override
    public void run() {
       
    	while (!isExit){
            try {
                Thread.sleep(100);
            } catch (InterruptedException ignored) {}

            refreshTime();
            checkPause();
            timeInMillis += 100;
        }
    }

    private synchronized void checkPause(){
        while (isPause)
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
    }

    private void refreshTime(){
        setText(convertTimeInMillisToString());
        repaint();
    }

    private String convertTimeInMillisToString(){
        long timeCopy = timeInMillis;

        StringBuilder hour = new StringBuilder(Long.toString(timeCopy/1000/60/60));
        if (hour.length() < 2)
            hour.insert(0, "0");
        timeCopy %= (1000*60*60);

        StringBuilder min = new StringBuilder(Long.toString(timeCopy/1000/60));
        if (min.length() < 2)
            min.insert(0, "0");
        timeCopy %= (1000*60);

        StringBuilder sec = new StringBuilder(Long.toString(timeCopy/1000));
        if (sec.length() < 2)
            sec.insert(0, "0");
        timeCopy %= 1000;

        StringBuilder millis = new StringBuilder(Long.toString(timeCopy/100));
        if (millis.length() < 2)
            millis.insert(0, "0");

        return "Время игры: " + hour + ":" + min + ":" + sec + ":" + millis;
    }

    public void stop(){
        pause();
        timeInMillis = 0;
        refreshTime();

    }

    public void pause(){
        isPause = true;
    }

    public synchronized void resume(){
        isPause = false;
        notify();
    }

    public void start(){
        timeInMillis = 0;
        resume();
    }

    public long getTimeInMillis(){
        return timeInMillis;
    }
}
