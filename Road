package race;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Road extends JPanel implements ActionListener, Runnable{
	
	Timer mainTimer = new Timer(20, this);
	
	Image img = new ImageIcon("E:\\oop\\romanskaya\\workspace\\Gonochki\\src\\race\\img\\Road2.jpg").getImage();
	
	MyCar m = new MyCar();
	

Thread EvilCars = new Thread(this);
List<EvilCar> evils = new ArrayList<EvilCar>();
	
	
	public Road(){
		mainTimer.start();
		EvilCars.start();
		addKeyListener(new MyKeyAdapter());
        setFocusable(true);
	}
	
	private class MyKeyAdapter extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            m.keyPressed(e);
        }
    public void keyReleased(KeyEvent e) {
            m.keyReleased(e);
        }
	}
	
	public void paint(Graphics g){
		g = (Graphics2D) g;
		g.drawImage(img, m.layer1, 0, null);
		g.drawImage(img, m.layer2, 0, null);
		g.drawImage(m.img, m.x, m.y, null);
		
	Iterator<EvilCar> i = evils.iterator();
		while(i.hasNext()){
			EvilCar e = i.next();
			if (e.x >= 2400 || e.x <= -2400){
				i.remove();
			} else{	
			e.move();
			g.drawImage(e.img, e.x, e.y, null);
			}
		}
	}

	
	public void actionPerformed(ActionEvent e){
		m.move();
		repaint();
		testCrash();
		
	}

	private void testCrash() {
		
		Iterator<EvilCar> i = evils.iterator();
		while(i.hasNext()){
			EvilCar e = i.next();
			if (m.getRect().intersects(e.getRect())){
				JOptionPane.showMessageDialog(null, "Врезались");
				System.exit(1);
			}
		}
	}


	@Override
	public void run() {
		while(true){
			Random rand = new Random();
			try {
				Thread.sleep(rand.nextInt(2000));
				evils.add(new EvilCar(1200,
						rand.nextInt(300),
						rand.nextInt(60),
						this));
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
	}
		
	}

